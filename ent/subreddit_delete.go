// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/redditgoent/ent/predicate"
	"github.com/renaldyhidayatt/redditgoent/ent/subreddit"
)

// SubredditDelete is the builder for deleting a Subreddit entity.
type SubredditDelete struct {
	config
	hooks    []Hook
	mutation *SubredditMutation
}

// Where appends a list predicates to the SubredditDelete builder.
func (sd *SubredditDelete) Where(ps ...predicate.Subreddit) *SubredditDelete {
	sd.mutation.Where(ps...)
	return sd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sd *SubredditDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SubredditMutation](ctx, sd.sqlExec, sd.mutation, sd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sd *SubredditDelete) ExecX(ctx context.Context) int {
	n, err := sd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sd *SubredditDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: subreddit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subreddit.FieldID,
			},
		},
	}
	if ps := sd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sd.mutation.done = true
	return affected, err
}

// SubredditDeleteOne is the builder for deleting a single Subreddit entity.
type SubredditDeleteOne struct {
	sd *SubredditDelete
}

// Where appends a list predicates to the SubredditDelete builder.
func (sdo *SubredditDeleteOne) Where(ps ...predicate.Subreddit) *SubredditDeleteOne {
	sdo.sd.mutation.Where(ps...)
	return sdo
}

// Exec executes the deletion query.
func (sdo *SubredditDeleteOne) Exec(ctx context.Context) error {
	n, err := sdo.sd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subreddit.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdo *SubredditDeleteOne) ExecX(ctx context.Context) {
	if err := sdo.Exec(ctx); err != nil {
		panic(err)
	}
}
