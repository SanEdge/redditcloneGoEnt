// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPostname holds the string denoting the postname field in the database.
	FieldPostname = "postname"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldVoteCount holds the string denoting the votecount field in the database.
	FieldVoteCount = "vote_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSubreddit holds the string denoting the subreddit edge name in mutations.
	EdgeSubreddit = "subreddit"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "post_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// SubredditTable is the table that holds the subreddit relation/edge. The primary key declared below.
	SubredditTable = "post_subreddit"
	// SubredditInverseTable is the table name for the Subreddit entity.
	// It exists in this package in order to avoid circular dependency with the "subreddit" package.
	SubredditInverseTable = "subreddits"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldPostname,
	FieldURL,
	FieldDescription,
	FieldVoteCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "posts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"comment_post",
	"vote_post",
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"post_id", "user_id"}
	// SubredditPrimaryKey and SubredditColumn2 are the table columns denoting the
	// primary key for the subreddit relation (M2M).
	SubredditPrimaryKey = []string{"post_id", "subreddit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVoteCount holds the default value on creation for the "voteCount" field.
	DefaultVoteCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
