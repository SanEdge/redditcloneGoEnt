// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/redditgoent/ent/post"
	"github.com/renaldyhidayatt/redditgoent/ent/predicate"
	"github.com/renaldyhidayatt/redditgoent/ent/user"
	"github.com/renaldyhidayatt/redditgoent/ent/vote"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vu *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVote sets the "vote" field.
func (vu *VoteUpdate) SetVote(v vote.Vote) *VoteUpdate {
	vu.mutation.SetVote(v)
	return vu
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (vu *VoteUpdate) AddPostIDs(ids ...int) *VoteUpdate {
	vu.mutation.AddPostIDs(ids...)
	return vu
}

// AddPost adds the "post" edges to the Post entity.
func (vu *VoteUpdate) AddPost(p ...*Post) *VoteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddPostIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (vu *VoteUpdate) AddUserIDs(ids ...int) *VoteUpdate {
	vu.mutation.AddUserIDs(ids...)
	return vu
}

// AddUser adds the "user" edges to the User entity.
func (vu *VoteUpdate) AddUser(u ...*User) *VoteUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddUserIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (vu *VoteUpdate) Mutation() *VoteMutation {
	return vu.mutation
}

// ClearPost clears all "post" edges to the Post entity.
func (vu *VoteUpdate) ClearPost() *VoteUpdate {
	vu.mutation.ClearPost()
	return vu
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (vu *VoteUpdate) RemovePostIDs(ids ...int) *VoteUpdate {
	vu.mutation.RemovePostIDs(ids...)
	return vu
}

// RemovePost removes "post" edges to Post entities.
func (vu *VoteUpdate) RemovePost(p ...*Post) *VoteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemovePostIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (vu *VoteUpdate) ClearUser() *VoteUpdate {
	vu.mutation.ClearUser()
	return vu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (vu *VoteUpdate) RemoveUserIDs(ids ...int) *VoteUpdate {
	vu.mutation.RemoveUserIDs(ids...)
	return vu
}

// RemoveUser removes "user" edges to User entities.
func (vu *VoteUpdate) RemoveUser(u ...*User) *VoteUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, VoteMutation](ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoteUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoteUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoteUpdate) check() error {
	if v, ok := vu.mutation.Vote(); ok {
		if err := vote.VoteValidator(v); err != nil {
			return &ValidationError{Name: "vote", err: fmt.Errorf(`ent: validator failed for field "Vote.vote": %w`, err)}
		}
	}
	return nil
}

func (vu *VoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vote.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Vote(); ok {
		_spec.SetField(vote.FieldVote, field.TypeEnum, value)
	}
	if vu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPostIDs(); len(nodes) > 0 && !vu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedUserIDs(); len(nodes) > 0 && !vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetVote sets the "vote" field.
func (vuo *VoteUpdateOne) SetVote(v vote.Vote) *VoteUpdateOne {
	vuo.mutation.SetVote(v)
	return vuo
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (vuo *VoteUpdateOne) AddPostIDs(ids ...int) *VoteUpdateOne {
	vuo.mutation.AddPostIDs(ids...)
	return vuo
}

// AddPost adds the "post" edges to the Post entity.
func (vuo *VoteUpdateOne) AddPost(p ...*Post) *VoteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddPostIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (vuo *VoteUpdateOne) AddUserIDs(ids ...int) *VoteUpdateOne {
	vuo.mutation.AddUserIDs(ids...)
	return vuo
}

// AddUser adds the "user" edges to the User entity.
func (vuo *VoteUpdateOne) AddUser(u ...*User) *VoteUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddUserIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (vuo *VoteUpdateOne) Mutation() *VoteMutation {
	return vuo.mutation
}

// ClearPost clears all "post" edges to the Post entity.
func (vuo *VoteUpdateOne) ClearPost() *VoteUpdateOne {
	vuo.mutation.ClearPost()
	return vuo
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (vuo *VoteUpdateOne) RemovePostIDs(ids ...int) *VoteUpdateOne {
	vuo.mutation.RemovePostIDs(ids...)
	return vuo
}

// RemovePost removes "post" edges to Post entities.
func (vuo *VoteUpdateOne) RemovePost(p ...*Post) *VoteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemovePostIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (vuo *VoteUpdateOne) ClearUser() *VoteUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (vuo *VoteUpdateOne) RemoveUserIDs(ids ...int) *VoteUpdateOne {
	vuo.mutation.RemoveUserIDs(ids...)
	return vuo
}

// RemoveUser removes "user" edges to User entities.
func (vuo *VoteUpdateOne) RemoveUser(u ...*User) *VoteUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vote entity.
func (vuo *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	return withHooks[*Vote, VoteMutation](ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoteUpdateOne) check() error {
	if v, ok := vuo.mutation.Vote(); ok {
		if err := vote.VoteValidator(v); err != nil {
			return &ValidationError{Name: "vote", err: fmt.Errorf(`ent: validator failed for field "Vote.vote": %w`, err)}
		}
	}
	return nil
}

func (vuo *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vote.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Vote(); ok {
		_spec.SetField(vote.FieldVote, field.TypeEnum, value)
	}
	if vuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPostIDs(); len(nodes) > 0 && !vuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.PostTable,
			Columns: []string{vote.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
