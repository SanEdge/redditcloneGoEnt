// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/redditgoent/ent/post"
	"github.com/renaldyhidayatt/redditgoent/ent/predicate"
	"github.com/renaldyhidayatt/redditgoent/ent/subreddit"
	"github.com/renaldyhidayatt/redditgoent/ent/user"
)

// SubredditUpdate is the builder for updating Subreddit entities.
type SubredditUpdate struct {
	config
	hooks    []Hook
	mutation *SubredditMutation
}

// Where appends a list predicates to the SubredditUpdate builder.
func (su *SubredditUpdate) Where(ps ...predicate.Subreddit) *SubredditUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SubredditUpdate) SetName(s string) *SubredditUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SubredditUpdate) SetDescription(s string) *SubredditUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SubredditUpdate) SetCreatedAt(t time.Time) *SubredditUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SubredditUpdate) SetNillableCreatedAt(t *time.Time) *SubredditUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubredditUpdate) SetUpdatedAt(t time.Time) *SubredditUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubredditUpdate) ClearUpdatedAt() *SubredditUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (su *SubredditUpdate) AddPostIDs(ids ...int) *SubredditUpdate {
	su.mutation.AddPostIDs(ids...)
	return su
}

// AddPosts adds the "posts" edges to the Post entity.
func (su *SubredditUpdate) AddPosts(p ...*Post) *SubredditUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPostIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (su *SubredditUpdate) AddUserIDs(ids ...int) *SubredditUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUser adds the "user" edges to the User entity.
func (su *SubredditUpdate) AddUser(u ...*User) *SubredditUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// Mutation returns the SubredditMutation object of the builder.
func (su *SubredditUpdate) Mutation() *SubredditMutation {
	return su.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (su *SubredditUpdate) ClearPosts() *SubredditUpdate {
	su.mutation.ClearPosts()
	return su
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (su *SubredditUpdate) RemovePostIDs(ids ...int) *SubredditUpdate {
	su.mutation.RemovePostIDs(ids...)
	return su
}

// RemovePosts removes "posts" edges to Post entities.
func (su *SubredditUpdate) RemovePosts(p ...*Post) *SubredditUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePostIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (su *SubredditUpdate) ClearUser() *SubredditUpdate {
	su.mutation.ClearUser()
	return su
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (su *SubredditUpdate) RemoveUserIDs(ids ...int) *SubredditUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUser removes "user" edges to User entities.
func (su *SubredditUpdate) RemoveUser(u ...*User) *SubredditUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubredditUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SubredditMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubredditUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubredditUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubredditUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubredditUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := subreddit.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubredditUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := subreddit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subreddit.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := subreddit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subreddit.description": %w`, err)}
		}
	}
	return nil
}

func (su *SubredditUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subreddit.Table,
			Columns: subreddit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subreddit.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subreddit.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subreddit.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(subreddit.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subreddit.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subreddit.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPostsIDs(); len(nodes) > 0 && !su.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUserIDs(); len(nodes) > 0 && !su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subreddit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubredditUpdateOne is the builder for updating a single Subreddit entity.
type SubredditUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubredditMutation
}

// SetName sets the "name" field.
func (suo *SubredditUpdateOne) SetName(s string) *SubredditUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubredditUpdateOne) SetDescription(s string) *SubredditUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SubredditUpdateOne) SetCreatedAt(t time.Time) *SubredditUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SubredditUpdateOne) SetNillableCreatedAt(t *time.Time) *SubredditUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubredditUpdateOne) SetUpdatedAt(t time.Time) *SubredditUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubredditUpdateOne) ClearUpdatedAt() *SubredditUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (suo *SubredditUpdateOne) AddPostIDs(ids ...int) *SubredditUpdateOne {
	suo.mutation.AddPostIDs(ids...)
	return suo
}

// AddPosts adds the "posts" edges to the Post entity.
func (suo *SubredditUpdateOne) AddPosts(p ...*Post) *SubredditUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPostIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (suo *SubredditUpdateOne) AddUserIDs(ids ...int) *SubredditUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUser adds the "user" edges to the User entity.
func (suo *SubredditUpdateOne) AddUser(u ...*User) *SubredditUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// Mutation returns the SubredditMutation object of the builder.
func (suo *SubredditUpdateOne) Mutation() *SubredditMutation {
	return suo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (suo *SubredditUpdateOne) ClearPosts() *SubredditUpdateOne {
	suo.mutation.ClearPosts()
	return suo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (suo *SubredditUpdateOne) RemovePostIDs(ids ...int) *SubredditUpdateOne {
	suo.mutation.RemovePostIDs(ids...)
	return suo
}

// RemovePosts removes "posts" edges to Post entities.
func (suo *SubredditUpdateOne) RemovePosts(p ...*Post) *SubredditUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePostIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (suo *SubredditUpdateOne) ClearUser() *SubredditUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (suo *SubredditUpdateOne) RemoveUserIDs(ids ...int) *SubredditUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUser removes "user" edges to User entities.
func (suo *SubredditUpdateOne) RemoveUser(u ...*User) *SubredditUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubredditUpdateOne) Select(field string, fields ...string) *SubredditUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subreddit entity.
func (suo *SubredditUpdateOne) Save(ctx context.Context) (*Subreddit, error) {
	suo.defaults()
	return withHooks[*Subreddit, SubredditMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubredditUpdateOne) SaveX(ctx context.Context) *Subreddit {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubredditUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubredditUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubredditUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := subreddit.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubredditUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := subreddit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subreddit.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := subreddit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subreddit.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SubredditUpdateOne) sqlSave(ctx context.Context) (_node *Subreddit, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subreddit.Table,
			Columns: subreddit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subreddit.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subreddit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subreddit.FieldID)
		for _, f := range fields {
			if !subreddit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subreddit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subreddit.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subreddit.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(subreddit.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subreddit.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subreddit.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !suo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subreddit.PostsTable,
			Columns: subreddit.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUserIDs(); len(nodes) > 0 && !suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subreddit.UserTable,
			Columns: []string{subreddit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subreddit{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subreddit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
